interface ObstacleAlert {
  type: string; // lo·∫°i r√†o c·∫£n
  severity: string; // m·ª©c ƒë·ªô nghi√™m tr·ªçng
  distance: number; // kho·∫£ng c√°ch (m√©t)
  direction: string; // h∆∞·ªõng t∆∞∆°ng ƒë·ªëi
  description: string; // m√¥ t·∫£
  action: string; // h√†nh ƒë·ªông
}

interface Landmark {
  name: string; // t√™n ƒë·ªãa danh
  direction: string; // h∆∞·ªõng t∆∞∆°ng ƒë·ªëi
  distance: number; // kho·∫£ng c√°ch (m√©t)
}

interface EnvironmentInfo {
  environment_type: string; // lo·∫°i m√¥i tr∆∞·ªùng
  description: string; // m√¥ t·∫£
  landmarks?: Landmark[]; // danh s√°ch c√°c ƒë·ªãa danh quan tr·ªçng
}

interface TextContent {
  text_content: string; // n·ªôi dung vƒÉn b·∫£n
  text_type: string; // lo·∫°i vƒÉn b·∫£n (v√≠ d·ª•: bi·ªÉn b√°o, ch·ªâ d·∫´n)
  location: string; // v·ªã tr√≠ c·ªßa vƒÉn b·∫£n
}

interface NavigationGuidance {
  instruction: string; // h∆∞·ªõng d·∫´n
  direction: string; // h∆∞·ªõng t∆∞∆°ng ƒë·ªëi
}

// Mock API Functions for Walking Assistant
// g·ª≠i c·∫£nh b√°o ch∆∞·ªõng ng·∫°i v·∫≠t
export function sendObstacleAlert(params: ObstacleAlert): void {
  console.log("üö® OBSTACLE ALERT:");
  console.log(`Type: ${params.type}`);
  console.log(`Severity: ${params.severity}`);
  console.log(`Distance: ${params.distance} meters`);
  console.log(`Direction: ${params.direction}`);
  console.log(`Description: ${params.description}`);
  console.log(`Action: ${params.action}`);
  console.log("-------------------");
}

// g·ª≠i n·ªôi dung vƒÉn b·∫£n
export function sendTextContent(params: TextContent): void {
  console.log("üìñ TEXT CONTENT:");
  console.log(`Text Type: ${params.text_type}`);
  console.log(`Location: ${params.location}`);
  console.log(`Content: "${params.text_content}"`);
  console.log("-------------------");
}

// m√¥ t·∫£ m√¥i tr∆∞·ªùng
export function sendEnvironmentInfo(params: EnvironmentInfo): void {
  console.log("üåç ENVIRONMENT INFO:");
  console.log(`Environment Type: ${params.environment_type}`);
  console.log(`Description: ${params.description}`);

  if (params.landmarks && params.landmarks.length > 0) {
    console.log("Landmarks:");
    params.landmarks.forEach((landmark, index) => {
      console.log(
        `  ${index + 1}. ${landmark.name} - ${landmark.direction} (${
          landmark.distance
        }m)`
      );
    });
  }
  console.log("-------------------");
}

// d·∫´n ƒë∆∞·ªùng
export function sendNavigationGuidance(params: NavigationGuidance): void {
  console.log("üß≠ NAVIGATION GUIDANCE:");
  console.log(`Instruction: ${params.instruction}`);
  console.log(`Direction: ${params.direction}`);
  console.log("-------------------");
}
